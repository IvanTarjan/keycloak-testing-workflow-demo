name: Deploy and test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Solo se usa localmente
      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      - name: Build all SPI modules
        run: |
          for POM in $(find KeycloakProviders -name pom.xml); do
            DIR=$(dirname "$POM")
            echo "Building $DIR..."
            mvn -f "$POM" clean package -DskipTests
          done

      - name: Deploy all SPI jars to Keycloak nodes
        run: |
          # Create a temporary directory for SSH key
          mkdir -p ~/.ssh
          # Add the private key from GitHub Secrets
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Start ssh-agent and add the key with its passphrase
          eval "$(ssh-agent -s)"
          ssh-add -q ~/.ssh/id_rsa <<< "${{ secrets.SSH_PASSPHRASE }}"
          
          for JAR in $(find KeycloakProviders -type f -path "*/target/*.jar"); do
            echo "Jar ready to deploy $JAR"
            for HOST in ${{ secrets.KEYCLOAK_NODES }}; do
              echo "Deploying $JAR to $HOST..."
              scp -o StrictHostKeyChecking=no "$JAR" "root@$HOST:/home/carrefour/github/carrefour-mp/infraDev/keycloakProviders/"
            done
          done
          
          # Optional: Restart Keycloak service
          # echo "Restarting Keycloak service on nodes..."
          # for HOST in ${{ secrets.KEYCLOAK_NODES }}; do
          #   echo "Restarting Keycloak on $HOST..."
          #   # Ejecuta el comando docker compose restart keycloak vía SSH
          #   # Asegúrate de que el path 'cd /home/carrefour/github/carrefour-mp/infraDev/' es donde está tu docker-compose.yml
          #   ssh -o StrictHostKeyChecking=no "root@$HOST" "cd /home/carrefour/github/carrefour-mp/infraDev/ && docker compose restart keycloak"
          # done

  postman-test-runner:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: matt-ball/newman-action@master
        with:
          collection: ./Testing/Backend/UserPasswordAuth/BasicKeycloakTest.postman_collection.json
          environment: ./Testing/Backend/UserPasswordAuth/BasicTestEnvironment.postman_environment.json
          envVar: '[{ "key": "url", "value": "${{ secrets.KEYCLOAK_TEST_HOST }}" }, { "key": "realm", "value": "${{ secrets.KEYCLOAK_TEST_REALM }}" }, { "key": "username", "value": "${{ secrets.KEYCLOAK_TEST_USERNAME }}" }, { "key": "password", "value": "${{ secrets.KEYCLOAK_TEST_PASSWORD }}" }, { "key": "clientId", "value": "${{ secrets.KEYCLOAK_TEST_CLIENT }}" }]'
          insecure: true

  selenium-js-test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: >-
          --shm-size=2gb

    env:
      BROWSER: chrome
      SELENIUM: localhost
      SERVER_URL: ${{ secrets.KEYCLOAK_TEST_HOST }}
      REALM: ${{ secrets.KEYCLOAK_TEST_REALM }}
      CLIENT_ID: ${{ secrets.KEYCLOAK_TEST_CLIENT }}
      TEST_USERNAME: ${{ secrets.KEYCLOAK_TEST_USERNAME }}
      TEST_PASSWORD: ${{ secrets.KEYCLOAK_TEST_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci
        working-directory: ./Testing/Frontend/SeleniumJs

      - name: Run Selenium JS tests
        run: npm test
        working-directory: ./Testing/Frontend/SeleniumJs
